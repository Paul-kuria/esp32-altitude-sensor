// Include required libraries

// Camera libraries
#include "esp_camera.h"
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "driver/rtc_io.h"

//MicroSD Libraries {File System}
#include "FS.h" 
#include "SD_MMC.h"

//EEPROM Library
#include "EEPROM.h"

//use 1 byte of EEPROM space
#define EEPROM_SIZE 1

//counter for picture number
unsigned int pictureCount = 0;

//Pin Definitions for CAMERA_MODEL_AI_THINKER
#define PWDN_GPIO_NUM   32  //power
#define RESET_GPIO_NUM  -1
#define XCLK_GPIO_NUM    0
#define SIOD_GPIO_NUM   26  //sda
#define SIOC_GPIO_NUM   27  //scl

#define Y9_GPIO_NUM     35  //d7
#define Y8_GPIO_NUM     34  //d6
#define Y7_GPIO_NUM     39  //d5
#define Y6_GPIO_NUM     36  //d4
#define Y5_GPIO_NUM     21  //d3
#define Y4_GPIO_NUM     19  //d2
#define Y3_GPIO_NUM     18  //d1
#define Y2_GPIO_NUM     5   //d0
#define VSYNC_GPIO_NUM  25
#define HREF_GPIO_NUM   23
#define PCLK_GPIO_NUM   22

/* Function to configure ESP camera */
void configESPCamera() {
    //config camera parameters
    //object to store the camera configuration parameters
    camera_config_t config;

    config.ledc_channel = LEDC_CHANNEL_0;
    config.ledc_timer = LEDC_TIMER_0;
    config.pin_d0 = Y2_GPIO_NUM;
    config.pin_d1 = Y3_GPIO_NUM;
    config.pin_d2 = Y4_GPIO_NUM;
    config.pin_d3 = Y5_GPIO_NUM;
    config.pin_d4 = Y6_GPIO_NUM;
    config.pin_d5 = Y7_GPIO_NUM;
    config.pin_d6 = Y8_GPIO_NUM;
    config.pin_d7 = Y9_GPIO_NUM;
    config.pin_xclk = XCLK_GPIO_NUM;
    config.pin_pclk = PCLK_GPIO_NUM;
    config.pin_vsync = VSYNC_GPIO_NUM;
    config.pin_href = HREF_GPIO_NUM;
    config.pin_sscb_sda = SIOD_GPIO_NUM;
    config.pin_sscb_scl = SIOC_GPIO_NUM;
    config.pin_pwdn = PWDN_GPIO_NUM;
    config.pin_reset = RESET_GPIO_NUM;
    config.xclk_freq_hz = 20000000; 
    config.pixel_format = PIXFORMAT_JPEG;   // choices are YUV422 GRAYSCALE, RGB565, JPEG

    // select lower framesize if the camera does not support PSRAM
    if (psramFound()) {
        config.frame_size = FRAMESIZE_UXGA;
        config.jpeg_quality = 10;
        config.fb_count = 2;
    }
    else {
        config.frame_size = FRAMESIZE_SVGA;
        config.jpeg_quality = 12;
        config.fb_count = 1;
    }

    //Initialize camera
    esp_err_t err = esp_camera_init(&config);
    if (err != ESP_OK){
        Serial.printf("Camera init failed with error 0x%x", err);
        return;
    }

    //camera quality adjustments
    sensor_t * s = esp_camera_sensor_get();
    //Brightness (-2 to 2)
    s->set_brightness(s,0);
    //Contrast (-2 to 2)
    s->set_contrast(s, 0);
    //Saturation (-2 to 2)
    s->set_saturation(s, 0);
    //Special effects (0 - no effec, 1- negative, 2 - grayscale, 3 - Red tint, 4 - Green tint, 5- Blue tint)
    s->set_special_effect(s, 0);
    //white balance (0 = disable, 1 = enable)
    s->set_whitebal(s, 1);
    //awb (0 = disable, 1 = enable)
    s->set_awb_gain(s, 1);
    //WB modes (0 = auto, 1 - Sunny, 2 - Cloudy, 3 - Office, 4 - Home);
    s->set_wb_mode(s, 0);
    //exposure (0 = disable, 1 = enable)
    s->set_exposure_ctrl(s, 1);
    //aec2 (0 = disable, 1 = enable)
    s->set_aec2(s, 0);
    //ae levels (-2 to 2)
    s->set_ae_level(s, 0);
    s->set_aec_value(s, 300);
    s->set_gain_ctrl(s, 1);
    s->set_gainceiling(s, (gainceiling_t)0);
    s->set_bpc(s, 0);
    s->set_wpc(s, 1);
    s->set_raw_gma(s, 1);
    s->set_lenc(s, 1);
    s->set_hmirror(s, 0);
    s->set_vflip(s, 0);
    s->set_dcw(s, 1);
    s->set_colorbar(s, 0);
    
}

void initMicroSD() {
    //start SD card
    Serial.println("Mounting MicroSD Card");
    if (!SD_MMC.begin()){
        Serial.println("MicroSD card mount failed");
        return;
    }
    uint8_t cardType = SD_MMC.cardType();
    if (cardType == CARD_NONE){
        Serial.println("No MicroSD card found");
        return;
    }
}

void takeNewPhoto(String path){
     //Take picture with camera
     //Setup frame buffer
    camera_fb_t * fb = esp_camera_fb_get();

    if (!fb){
        Serial.println("Camera capture failed");
        return;
    }

    //save picture to microSD
    fs::FS &fs = SD_MMC;
    File file = fs.open(path.c_str(), FILE_WRITE);
    if (!file){
        Serial.println("Failed to open file in write mode");
    }
    else {
        file.write(fb->buf, fb->len);   //payload (image), payload length
        Serial.printf("Saved file to path: %s\n", path.c_str());
    }

    //close the file
    file.close();

    //Return the frame buffer back to the drive for reuse
    esp_camera_fb_return(fb);
}

void setup() {
    //Disable brown-out detector
    WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);

    //Start serial monitor
    Serial.begin(115200);

    //Initialize the camera
    Serial.print("Initializing the camera module...");
    configESPCamera();
    Serial.println("Camera OK!");

    //Initialize the microSD
    Serial.print("Initializing the MicroSD card module...");
    initMicroSD();

    //Initialize the EEPROMM with predefined size 
    EEPROM.begin(EEPROM_SIZE);
    pictureCount = EEPROM.read(0) + 1;

    //Path where new pictures will be saved in SD card
    String path = "/image" + String(pictureCount) + ".jpg";
    Serial.printf("Picture file name: %s\n", path.c_str());

    //Take and save photo
    takeNewPhoto(path);

    //Update EEPROM picture number counter
    EEPROM.write(0, pictureCount);
    EEPROM.commit();

    //Bind wakeup to GPIO13 going low
    esp_sleep_enable_ext0_wakeup(GPIO_NUM_13, 0);

    Serial.println("Entering sleep mode");
    delay(1000);

    //Enter deep sleep mode
    esp_deep_sleep_start();
}

void loop(){
    
}

